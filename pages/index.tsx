import Head from 'next/head'
import { useSession, useSupabaseClient } from '@supabase/auth-helpers-react'
import { Auth, ThemeSupa } from '@supabase/auth-ui-react'
import TodoList from '@/components/TodoList'
import { useEffect } from 'react'

export default function Home() {
  const session = useSession()
  const supabase = useSupabaseClient()

  useEffect(() => {
    const addUserToPublicTable = async (user: { id: string; email: string | null }) => {

      const { data: existingUser, error: fetchError } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single();

      if (fetchError) {
        console.error('Error checking user existence:', fetchError.message);
        return;
      }

      if (!existingUser) {
        // Insert the new user into the public.users table
        const { error: insertError } = await supabase
          .from('users')
          .insert([{ id: user.id, email: user.email }]);

        if (insertError) {
          console.error('Error inserting user into public.users:', insertError.message);
        } else {
          console.log('User added to public.users table');
        }
      } else {
        console.log('User already exists in public.users table');
      }
    };

    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (event === 'SIGNED_IN' && session) {
        const { user } = session;
        await addUserToPublicTable({
          id: user.id,
          email: user.email ?? null, // Fallback to null if email is undefined
        });
      }
    });

    return () => {
      authListener?.subscription.unsubscribe();
    };
  }, [supabase]);


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full h-full bg-200">
        {!session ? (
          <div className="min-w-full min-h-screen flex items-center justify-center">
            <div className="w-full h-full flex justify-center items-center p-4">
              <div className="w-full h-full sm:h-auto sm:w-2/5 max-w-sm p-5 bg-white shadow flex flex-col text-base">
                <span className="font-sans text-4xl text-center pb-2 mb-1 border-b mx-4 align-center">
                  Login
                </span>
                <Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} theme="dark" />
              </div>
            </div>
          </div>
        ) : (
          <div
            className="w-full h-full flex flex-col justify-center items-center p-4"
            style={{ minWidth: 250, maxWidth: 600, margin: 'auto' }}
          >
            <TodoList session={session} />
            <button
              className="btn-black w-full mt-12"
              onClick={async () => {
                const { error } = await supabase.auth.signOut()
                if (error) console.log('Error logging out:', error.message)
              }}
            >
              Logout
            </button>
          </div>
        )}
      </div>
    </>
  )
}